plural = ['s', 'x']
vowels = ['a', 'e', 'i', 'o', 'u']

n = input()
if n[-1:] in plural or n[-2:] == 'ch' :
  n = n + 'es'
elif n[-1:] == 'y' :
  if n[-2:-1] in vowels :
    n = n + 's'
  else :
    n = n[:-1] + 'ies'
else :
  n = n + 's'

print(n)

symbols = ['!', '@', '#', '$', '%', '^', '&', '*',
           '(', ')', '-', '_', '=', '+', '"', "'",
           '[', ']', '{', '}', '\\', '|', ',', '.',
           '/', '<', '>', ';', ':']
mts = ''
mtl1 = []
n = list(input())

for i in range(len(n)) :
  if n[i] not in symbols :
    mts += n[i]
  else :
    mts += ' '

mtl = mts.lower().split()
print(mtl[0], end = '')
for i in mtl[1:] :
  print(i.title(), end = '')

mts, mts1 = '', ''
mtl = []


while mts != 'end' :
  mts = input()
  for j in mts :
    if ord('A') <= ord(j) <= ord('M') or ord('a') <= ord(j) <= ord('m') :
      mts1 += chr(ord(j) + 13)
    elif ord('N') <= ord(j) <= ord('Z') or ord('n') <= ord(j) <= ord('z') :
      mts1 += chr(ord(j) - 13)
    else :
      mts1 += j
  mtl.append(mts1)
  mts1 = ''

for i in mtl[:-1] :
  print(i)

mtl1, mtl2 = [], []

n1 = input().lower().split()
n2 = input().lower().split()

for i in n1 :
  mtl1 += list(i)

for i in n2 :
  mtl2 += list(i)

mtl1.sort()
mtl2.sort()

if mtl1 == mtl2 :
  print('YES')
else :
  print('NO')

n = input().split()
fname, acyr = n[0], n[1]
acyr = acyr[-2:]
mtl = []

f = open(fname, 'r')
for line in f :
  x = line.split()
  if x[0][:2] == acyr :
    mtl.append(float(x[1]))

f.close()

if len(mtl) == 0 :
  print('No data')
else :
  print(min(mtl), max(mtl), sum(mtl) / len(mtl))

def chechDNA(dna) :
  code = ['A', 'T', 'C', 'G']
  for i in dna :
    if i not in code :
      return False
  return True

def rDNA(dna) :
  p1, p2 = ['A', 'C'], ['T', 'G']
  dna = dna[::-1]
  rDna = ''
  for i in dna :
    if i in p1 :
      rDna += p2[p1.index(i)]
    else :
      rDna += p1[p2.index(i)]
  print(rDna)

def fCode(dna) :
  a, t, c, g = 0, 0, 0, 0
  for i in dna :
    if i == 'A' : a += 1
    elif i == 'T' : t += 1
    elif i == 'C' : c += 1
    elif i == 'G' : g += 1
  print('A=' + str(a) + ', T=' + str(t) + ', G=' + str(g) + ', C=' + str(c))

def dDNA(dna) :
  c = 0
  p = input()
  for i in range(len(dna) - 1) :
    if dna[i:i + 2] == p :
      c += 1
  print(c)

dna = input().upper().strip()
op = input()

if chechDNA(dna) :
  if op == 'R' : rDNA(dna)
  if op == 'F' : fCode(dna)
  if op == 'D' : dDNA(dna)
else :
  print('Invalid DNA')

lowercase = list('abcdefghijklmnopqrstuvwxyz')
uppercase = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
digits = list('0123456789')
symbols = list('!"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~')

def no_lowercase(t) :
  for i in t :
    if i in lowercase : return False

  return True

def no_uppercase(t) :
  for i in t :
    if i in uppercase : return False

  return True

def no_number(t) :
  for i in t :
    if i in digits : return False

  return True

def no_symbol(t) :
  for i in t :
    if i in symbols : return False

  return True

def character_repetition(t) :
  for i in range(len(t) - 3) :
    if t[i] == t[i + 1] == t[i + 2] == t[i + 3] : return True

  return False

def number_sequence(t) :
  num = '01234567890'
  for i in range(len(t) - 3) :
    if t[i:i + 4] in num or t[i:i + 4] in num[::-1] : return True

  return False

def letter_sequence(t) :
  t = t.lower()
  lower = 'abcdefghijklmnopqrstuvwxyz'
  for i in range(len(t) - 3) :
    if t[i:i + 4] in lower or t[i:i + 4] in lower[::-1] : return True

  return False

def keyboard_pattern(t) :
  t = t.lower()
  r0,r1,r2,r3 = '!@#$%^&*()_+','qwertyuiop','asdfghjkl','zxcvbnm'
  for i in range(len(t) - 3) :
    if t[i:i + 4] in r0 or t[i:i + 4] in r0[::-1] : return True
    if t[i:i + 4] in r1 or t[i:i + 4] in r1[::-1] : return True
    if t[i:i + 4] in r2 or t[i:i + 4] in r2[::-1] : return True
    if t[i:i + 4] in r3 or t[i:i + 4] in r3[::-1] : return True

  return False

# --------------------

passw = input().strip()
error = []

if len(passw) < 8 : error.append('Less than 8 characters')
if no_lowercase(passw) : error.append('No lowercase letters')
if no_uppercase(passw) : error.append('No uppercase letters')
if no_number(passw) : error.append('No numbers')
if no_symbol(passw) : error.append('No symbols')
if character_repetition(passw) : error.append('Character repetition')
if number_sequence(passw) : error.append('Number sequence')
if letter_sequence(passw) : error.append('Letter sequence')
if keyboard_pattern(passw) : error.append('Keyboard pattern')
if len(error) == 0 : error.append('OK')

for i in error : print(i)

mtl, mtl1 = [], []
data1, data2 = input().split()

f1, f2 = open(data1, 'r'), open(data2, 'r')
for i in f1 :
  a, b = i.split()
  mtl.append([a[-2:], a[:-2], b])
for i in f2 :
  a, b = i.split()
  mtl.append([a[-2:], a[:-2], b])

mtl.sort()

for i in mtl : mtl1.append(i[1] + i[0] + ' ' + i[2])

for i in mtl1 : print(i)

def f(n) :
  new_n = ''
  n = str(n)[::-1]

  i = 0
  while i < len(n) :
    if i + 3 > len(n) :
      new_n += n[i]
      break
    new_n += n[i:i + 3] + ','
    i += 3

  return new_n[::-1]

print(f(1234567))