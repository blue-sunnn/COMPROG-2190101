# -*- coding: utf-8 -*-
"""COMPROG05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IxeSogp2cQ1QemJWsvaEvv5kg2SmPZKc
"""

s = input()
num = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
mtl, mtl1 = [], []

mtl = [i for i in s if (i in num) and (i not in mtl)]
mtl.sort()
mtl1 = [i for i in num if (i not in mtl)]

if len(mtl1) > 0 : print(','.join(mtl1))
else : print('None')

fname = ['Robert', 'William', 'James', 'John', 'Margaret', 'Edward', 'Sarah', 'Andrew', 'Anthony', 'Deborah']
nname = ['Dick', 'Bill', 'Jim', 'Jack', 'Peggy', 'Ed', 'Sally', 'Andy', 'Tony', 'Debbie']
mtl = []

n = int(input())

mtl = [(input()) for _ in range(n)]

for i in mtl :
  if i in fname : print(nname[fname.index(i)])
  elif i in nname : print(fname[nname.index(i)])
  else : print('Not found')

mtl, mtl1 = [], []

a = int(input())
mtl = [(int(input())) for _ in range(a)]

mtl += list(map(int, input().split()))

b = 0
while b != -1 :
  b = int(input())
  mtl.append(b)

mtl = mtl[:-1]
for i in range(len(mtl)) :
  if i % 2 == 0 : mtl1.append(mtl[i])
  else : mtl1.insert(0, mtl[i])

print(mtl1)

d = list(map(int, input().split()))
c = 0

for i in range(1, len(d) - 1) :
  if d[i - 1] < d[i] > d[i + 1] :
    c += 1

print(c)

v = list(set(map(int, input().split())))
v.sort()

print(len(v))
if len(v) < 10 : print(v)
else : print(v[:10])

n = int(input())
mtl = []
mtl.append(n)

while n != 1 :
  if n % 2 == 0 : n /= 2
  else : n = 3 * n + 1
  mtl.append(int(n))

if len(mtl) > 15 : mtl = mtl[-15:]

for i in mtl[:-1] :
  print(str(i) + '->', end = '')
print(str(mtl[-1]))

aup = ['A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F']
ids, grades = [], []

x = input().split()
while x != ['q'] :
  ids.append(x[0])
  grades.append(x[1])
  x = input().split()

uids = input().split()

for i in uids : grades[ids.index(i)] = aup[max(0, aup.index(grades[ids.index(i)]) - 1)]
for j in range(len(ids)) : print(ids[j], grades[j])

aup = ['A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F']
ids, grades, mtl = [], [], []

x = input().split()
while x != ['q'] :
  ids.append(x[0])
  grades.append(x[1])
  x = input().split()

uids = input().split()

for i in uids : grades[ids.index(i)] = aup[max(0, aup.index(grades[ids.index(i)]) - 1)]
for j in range(len(ids)) :
  y = []
  y.append(ids[j])
  y.append(grades[j])
  mtl.append(y)

mtl.sort()
for k in mtl : print(k[0], k[1])

n = int(input())
mtl = []

for i in range(n) :
  x = input().split()
  d = (float(x[0]) ** 2 + float(x[1]) ** 2) ** 0.5
  y = []
  y.extend([d, i + 1, x[0], x[1]])
  mtl.append(y)

mtl.sort()
z = mtl[2]
print('#' + str(z[1]) + ': ' + '(' + str(round(float(z[2]), 2)) + ', ' + str(round(float(z[3]), 2)) + ')')

d = input().split()
o = input()
n = int(len(d) / 2)

for i in range(len(o)) :
  if o[i] == 'C' :
    d = d[n:] + d[:n]
  elif o[i] == 'S' :
    temp = []
    for j in range(n) :
      temp.append(d[j])
      temp.append(d[j + n])
    d = temp

print(' '.join(d))

n = int(input())
ticket, timein, timeorder, queue = [], [], [], []
toShow = []

for _ in range(n) :
  x = input().split()
  if x[0] == 'reset' :
    ticket.append(int(x[1]))
  elif x[0] == 'new' :
    toShow.append('ticket ' + str(ticket[-1]))
    queue.append(ticket[-1])
    timein.append(int(x[1]))
    ticket.append(ticket[-1] + 1)
  elif x[0] == 'next' :
    order = queue[0]
    toShow.append('call ' + str(order))
    queue.pop(0)
    timeorder.append(0)
  elif x[0] == 'order' :
    idx = ticket.index(order)
    timeorder[idx] = int(x[1])
    toShow.append('qtime ' + str(order) + ' ' + str(timeorder[idx] - timein[idx]))
  elif x[0] == 'avg_qtime' :
    s, c = 0, 0
    for i in range(len(timeorder)) :
      if timeorder[i] > timein[i] :
        s += (timeorder[i] - timein[i])
        c +=1
    toShow.append('avg_qtime ' + str(round(s / c, 4)))

for i in toShow : print(i)